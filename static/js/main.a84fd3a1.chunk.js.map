{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","components/App/App.jsx","index.js"],"names":["FeedbackOptions","props","options","onLeaveFeedback","Object","keys","map","option","onClick","type","name","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","changeFeedback","event","preventDefault","key","target","setState","prevState","countTotalFeedback","values","reduce","acc","value","getPositivePercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PA2BeA,EAzBS,SAAAC,GACtB,IAAQC,EAA6BD,EAA7BC,QAASC,EAAoBF,EAApBE,gBACjB,OACE,8BACGC,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GACxB,OACE,wBAEEC,QAASL,EACTM,KAAK,SACLC,KAAMH,EAJR,SAMGA,GALIA,SC4BFI,MAnCf,SAAoBV,GAClB,IAAQW,EAAkDX,EAAlDW,KAAMC,EAA4CZ,EAA5CY,QAASC,EAAmCb,EAAnCa,IAAKC,EAA8Bd,EAA9Bc,MAAOC,EAAuBf,EAAvBe,mBACnC,OACE,qCACE,4CACA,kCACE,gCACE,+BACE,sCACA,yCACA,qCACA,4CAGJ,gCACE,+BACE,6BAAKJ,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,YAIX,yDAA0BC,SCLjBC,MAlBf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,mCACGD,GACC,gCACE,6BAAKA,IACJC,QCEIC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCGQC,E,4MACnBC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,eAAiB,SAAAC,GACfA,EAAMC,iBACN,IAAMC,EAAMF,EAAMG,OAAOlB,KAEzB,EAAKmB,UAAS,SAAAC,GACZ,OAAO,eACJH,EAAOG,EAAUH,IAAQ,O,EAKhCI,mBAAqB,WACnB,OAAO3B,OAAO4B,OAAO,EAAKT,OAAOU,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,I,EAGvEC,sBAAwB,WACtB,IAAMrB,EAAQ,EAAKgB,qBAEnB,OAAiB,IAAVhB,EAAA,UACAsB,KAAKC,MAAO,EAAKf,MAAMX,KAAOG,EAAS,KADvC,W,4CAIT,WACE,MAA+BwB,KAAKhB,MAA5BX,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,mCACE,eAAC,EAAD,CAASI,MAAM,wBAAf,UACE,cAAC,EAAD,CACEhB,QAASqC,KAAKhB,MACdpB,gBAAiBoC,KAAKf,iBAEvBe,KAAKR,qBACJ,cAAC,EAAD,CACEnB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOwB,KAAKR,qBACZf,mBAAoBuB,KAAKH,0BAG3B,cAAC,EAAD,CAAcf,QAAQ,kC,GA/CDmB,aCDjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a84fd3a1.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst FeedbackOptions = props => {\n  const { options, onLeaveFeedback } = props;\n  return (\n    <div>\n      {Object.keys(options).map(option => {\n        return (\n          <button\n            key={option}\n            onClick={onLeaveFeedback}\n            type=\"button\"\n            name={option}\n          >\n            {option}\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.object.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nfunction Statistics(props) {\n  const { good, neutral, bad, total, positivePercentage } = props;\n  return (\n    <>\n      <h2>Statistics</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Good</th>\n            <th>Neutral</th>\n            <th>Bad</th>\n            <th>Total</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th>{good}</th>\n            <th>{neutral}</th>\n            <th>{bad}</th>\n            <th>{total}</th>\n          </tr>\n        </tbody>\n      </table>\n      <p>{`Positive feedback: ${positivePercentage}`}</p>\n    </>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.string.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <>\n      {title && (\n        <div>\n          <h1>{title}</h1>\n          {children}\n        </div>\n      )}\n    </>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.array.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport FeedbackOptions from 'components/FeedbackOptions';\nimport Statistics from 'components/Statistics';\nimport Section from 'components/Section';\nimport Notification from 'components/Notification';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  changeFeedback = event => {\n    event.preventDefault();\n    const key = event.target.name;\n\n    this.setState(prevState => {\n      return {\n        [key]: (prevState[key] += 1),\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, value) => acc + value, 0);\n  };\n\n  getPositivePercentage = () => {\n    const total = this.countTotalFeedback();\n\n    return total !== 0\n      ? `${Math.round((this.state.good / total) * 100)}%`\n      : `0%`;\n  };\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={this.changeFeedback}\n          />\n          {this.countTotalFeedback() ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.getPositivePercentage()}\n            />\n          ) : (\n            <Notification message=\"There is no feedback\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}